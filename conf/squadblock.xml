							<code parent="rsquad" type="callPreexchangeMain">
	if(rightHand.getButton(0) || rightHand.getButton(2) || rightHand.getButton(3) || rightHand.getButton(4) || rightHand.getButton(5) || rightHand.getButton(10))
	{
		selectionMode = 0;
	}
	
	if (selectionMode == 2)
	{
		if(rightHand.getButton(6))	//		6	"L"
		{
			if(leftSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(leftSelectedObjects.size() == 1)
			{
				Object* oby = leftSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				upSelectedObjects.clear();
				rightSelectedObjects.clear();
				downSelectedObjects.clear();
				int i=0;
				int count = leftSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = leftSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					leftSelectedObjects.pop_front();
				}
			}
		}
		else if(rightHand.getButton(9))	//		9	"U"
		{
			if(upSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(upSelectedObjects.size() == 1)
			{
				Object* oby = upSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				leftSelectedObjects.clear();
				rightSelectedObjects.clear();
				downSelectedObjects.clear();
				int i=0;
				int count = upSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = upSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					upSelectedObjects.pop_front();
				}
			}
		}
		else if(rightHand.getButton(7)) 	//		8	"R"
		{
			if(rightSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(rightSelectedObjects.size() == 1)
			{
				Object* oby = rightSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				leftSelectedObjects.clear();
				upSelectedObjects.clear();
				downSelectedObjects.clear();
				int i=0;
				int count = rightSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = rightSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					rightSelectedObjects.pop_front();
				}
			}
		}
		else if(rightHand.getButton(8))	//		7	"D"
		{
			if(downSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(downSelectedObjects.size() == 1)
			{
				Object* oby = downSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				leftSelectedObjects.clear();
				upSelectedObjects.clear();
				rightSelectedObjects.clear();
				int i=0;
				int count = downSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = downSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					downSelectedObjects.pop_front();
				}
			}
		}
		// if arrow key pressed
		//  if selected quadrant has one, select it, selectionMode = 0
		//  else redistribute objects
	}
	
	button1 = rightHand.getButton(1);

	if(button1) //button is down
	{
		if(pressed1 == 0.0) //was just pressed
		{
			// get time since first I/O in milliseconds
			pressed1 = currentTime;
		}
	}
	else //button is up
	{
		if(pressed1 > 0.0) //button was down, now is up
		{
			selectionMode = 1; // just entered selection mode
		}
		pressed1 = 0.0;
	}
	
	rightHand.flashy(rightHand, objects);

							</code>
					<codeblock parent="rsquad" type="preexchangeMain">
						<name>flashy</name>
						<type>function</type>
						<documentation>
// Right hand effector's flashy function for selecting from multiple objects.
// Purpose:
//		- Extends effector until it touches an object or reaches the maximum length.
//		- Uses SQUAD technique
						</documentation>
						<declaration>
void RightVirtualHand::flashy(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength)
						</declaration>
						<functioncode>
							<code>
	// Return if grabbing an object.
	if(getGrabbedObject() != 0) return;

	// Reset tip to 0.0 ft. length.
	_currentLength = 0.0;
	setTipOffset(arVector3(0, 0, -_currentLength));

	list&lt;arInteractable*&gt; objectlist;
	std::copy(objects.begin (), objects.end (), std::back_inserter(objectlist));
	
	// Check if the maximum length has been reached or an object has been touched.
	while(_currentLength &lt; maxLength &amp;&amp; !ar_pollingInteraction(self, objectlist)) {
		// If not, increase tip length by interaction distance.
		_currentLength += _interactionDistance;
		setTipOffset(arVector3(0, 0, -_currentLength));
	}
	if(selectionMode == 1)
	{
		leftSelectedObjects.clear();
		upSelectedObjects.clear();
		rightSelectedObjects.clear();
		downSelectedObjects.clear();
		int numObjects = 0;
	
		vector&lt;arInteractable*&gt;::iterator i;
		for(i=objects.begin(); i != objects.end(); ++i) 
		{
			// get object location
			Object* oby = ((Object*)(*i));
			arMatrix4 objLoc = oby->getMatrix();
			// if object is in cone, then add to selected list
			float x[] = {objLoc[12], objLoc[13], objLoc[14]};
			float height = getLength();
			float radius = height/2.f;
			arMatrix4 tp = getBaseMatrix();
			arMatrix4 bm = getMatrix();
			float t[] = {tp[12],tp[13],tp[14]};
			float b[] = {bm[12],bm[13],bm[14]};
			
			if(isLyingInCone(x, t, b, radius, height))
			{
				if((numObjects) % 4 == 0)
				{
					leftSelectedObjects.push_back(oby);
				}
				else if(numObjects % 4 == 1)
				{
					upSelectedObjects.push_back(oby);
				}
				else if(numObjects % 4 == 2)
				{
					rightSelectedObjects.push_back(oby);
				}
				else if(numObjects % 4 == 3)
				{
					downSelectedObjects.push_back(oby);
				}
				++numObjects;
			}
		}
		if(numObjects == 0)
		{
			selectionMode = 0;
		}
		else if(numObjects == 1)
		{
			//if only one object, select it
			selectionMode = 0;
			Object* oby = leftSelectedObjects.front();
			//set the one object to selected
			oby->_selected = !oby->_selected;
		}
		else
		{
			//else selectionMode = 2, selected lists have all the items
			selectionMode = 2;
		}		
	}
							</code>
						</functioncode>
					</codeblock>
					<codeblock parent="rsquad" type="drawMain">
						<name>draw</name>
						<type>function</type>
						<documentation>
// Right hand effector&apos;s draw function.
						</documentation>
						<declaration>
void RightVirtualHand::draw()
						</declaration>
						<functioncode>
							<code>
	// Always start with glPushMatrix to avoid matrix multiplications done here from
	// affecting other portions of the scene.
	glPushMatrix();

		// Set to center of effector.
		glMultMatrixf(getCenterMatrix().v);
		// Scale to make 1 ft. cube into a 2" x 2" rod with current length in ft.
		glScalef(2.0/12.0, 2.0/12.0, _currentLength);
		
		
			glScalef(12.0/2.0, 12.0/2.0, 1/_currentLength);
			glColor3f(1.0, 1.0, 0.0);
			//GLdouble base=min(1*_currentLength,10.0f);
			GLdouble base=_currentLength/2.0;
			GLdouble height=1*_currentLength;
			GLint slices =50;
			GLint stacks =50;
			glTranslatef(0.0,0.0,-height/2.0f);
			glutSolidCone(base,height,slices,stacks);
			glTranslatef(0.0,0.0,height/2.0f);
			glScalef(2.0/12.0, 2.0/12.0, _currentLength);

	// Always finish with glPopMatrix to match glPushMatrix above.
	glPopMatrix();
							</code>
						</functioncode>
					</codeblock>
							<code parent="rsquad" type="preexchangeHeader">
		// Manipulator to make the effector extend until it touches an object or reaches
		// a maximum length (15 ft. by default).
		void flashy(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength = 15.0);
							</code>
							<code parent="rsquad" type="drawHeader">
		// Draw a representation for the right hand.
		void draw() ;//const;
							</code>
					
					<constructor parent="rsquad" type="constructor">
							<name>rhandconstructor</name>
							<type>function</type>
							<documentation>
		// Default constructor. 
		// Parameters for arEffector are:
		//		matrixIndex - index of matrix to use as position (1 is the right hand)
		//		numButtons - number of buttons to use from device array (11 buttons for Wiimote)
		//		loButton - index in device array of desired first button, (0 for right Wiimote)
		//				   which gets mapped to virtual button index 0 by default 
		//		buttonOffset - offset for mapping virtual buttons (0 for no offset)
		//		numAxes - number of axes to use from device (2 axes for Wiimote)
		//		loAxis - index in device array of desired first axis, (0 for right Wiimote)
		//				 which gets mapped to virtual axis index 0 by default
		//		axisOffset - offset for mapping virtual axes (0 for no offset)
							</documentation>
							<declaration>
		RightVirtualHand(const string&amp; filename = &quot;&quot;):arEffector(1, 11, 0, 0, 2, 0, 0)
							</declaration>
							<functioncode>
								<code>
		if(filename != &quot;&quot;) {
			if(!loadedOBJ.readOBJ(filename, &quot;data/obj&quot;)) { 
				cout &lt;&lt; &quot;Cound not load OBJ file: &quot; &lt;&lt; filename &lt;&lt; &apos;\n&apos;;
			}
		}
		
		
			// Set "tip" or point of interaction. Make ray initially 5 ft. long because we're going
			// to dynamically extend it to whatever object it touches first.
			_currentLength = 5.0;
			setTipOffset(arVector3(0, 0, -_currentLength));
			
			// Set to interact with closest object within 0.5 ft. of tip.
			// See szg/src/interaction/arInteractionSelector.h for alternative ways to select objects.
			_interactionDistance = 0.5;
			setInteractionSelector(arDistanceInteractionSelector(_interactionDistance));
			
			// Create grab condition when "A" button is pressed more than 0.5 to 
			// translate and rotate the selected object.
			// Wiimote index/button pairs:
			//		0	"2"
			//		1	"1"
			//		2	"B"
			//		3	"A"
			//		4	"-"
			//		5	"+"
			//		6	"L"
			//		7	"D"
			//		8	"R"
			//		9	"U"
			//		10	"H" or Home
			setDrag(arGrabCondition(AR_EVENT_BUTTON, 3, 0.5), arWandRelativeDrag());
								</code>
							</functioncode>
						</constructor>
						
						
						
						
						
						
						
						
						
						<code parent="rsquad" type="declaration">
RightVirtualHand rightHand();
						</code>
						<code parent="lsquad" type="declaration">
LeftVirtualHand leftHand();
						</code>
						
						
						
						
						
						
						
						
						
						
							<code parent="lsquad" type="callPreexchangeMain">
	if(leftHand.getButton(0) || leftHand.getButton(2) || leftHand.getButton(3) || leftHand.getButton(4) || leftHand.getButton(5) || leftHand.getButton(10))
	{
		selectionMode = 0;
	}
	
	if (selectionMode == 2)
	{
		if(leftHand.getButton(6))	//		6	"L"
		{
			if(leftSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(leftSelectedObjects.size() == 1)
			{
				Object* oby = leftSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				upSelectedObjects.clear();
				rightSelectedObjects.clear();
				downSelectedObjects.clear();
				int i=0;
				int count = leftSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = leftSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					leftSelectedObjects.pop_front();
				}
			}
		}
		else if(leftHand.getButton(9))	//		9	"U"
		{
			if(upSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(upSelectedObjects.size() == 1)
			{
				Object* oby = upSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				leftSelectedObjects.clear();
				rightSelectedObjects.clear();
				downSelectedObjects.clear();
				int i=0;
				int count = upSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = upSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					upSelectedObjects.pop_front();
				}
			}
		}
		else if(leftHand.getButton(7)) 	//		8	"R"
		{
			if(rightSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(rightSelectedObjects.size() == 1)
			{
				Object* oby = rightSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				leftSelectedObjects.clear();
				upSelectedObjects.clear();
				downSelectedObjects.clear();
				int i=0;
				int count = rightSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = rightSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					rightSelectedObjects.pop_front();
				}
			}
		}
		else if(leftHand.getButton(8))	//		7	"D"
		{
			if(downSelectedObjects.size() == 0)
			{
				selectionMode = 0;
			}
			else if(downSelectedObjects.size() == 1)
			{
				Object* oby = downSelectedObjects.front();
				oby->_selected = !oby->_selected;
				selectionMode = 0;
			}
			else
			{
				leftSelectedObjects.clear();
				upSelectedObjects.clear();
				rightSelectedObjects.clear();
				int i=0;
				int count = downSelectedObjects.size();
				for(i=0; i&lt;count; ++i)
				{
					Object* oby = downSelectedObjects.front();
					if(i % 4 == 0)
					{
						leftSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 1)
					{
						upSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 2)
					{
						rightSelectedObjects.push_back(oby);
					}
					else if(i % 4 == 3)
					{
						downSelectedObjects.push_back(oby);
					}
					downSelectedObjects.pop_front();
				}
			}
		}
		// if arrow key pressed
		//  if selected quadrant has one, select it, selectionMode = 0
		//  else redistribute objects
	}
	
	button1 = leftHand.getButton(1);

	if(button1) //button is down
	{
		if(pressed1 == 0.0) //was just pressed
		{
			// get time since first I/O in milliseconds
			pressed1 = currentTime;
		}
	}
	else //button is up
	{
		if(pressed1 > 0.0) //button was down, now is up
		{
			selectionMode = 1; // just entered selection mode
		}
		pressed1 = 0.0;
	}
	
	leftHand.flashy(leftHand, objects);
							</code>
					<codeblock parent="lsquad" type="preexchangeMain">
						<name>flashy</name>
						<type>function</type>
						<documentation>
// Left hand effector's flashy function for selecting from multiple objects.
// Purpose:
//		- Extends effector until it touches an object or reaches the maximum length.
//		- Uses SQUAD technique				
						</documentation>
						<declaration>
void LeftVirtualHand::flashy(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength)
						</declaration>
						<functioncode>
							<code>
	// Return if grabbing an object.
	if(getGrabbedObject() != 0) return;

	// Reset tip to 0.0 ft. length.
	_currentLength = 0.0;
	setTipOffset(arVector3(0, 0, -_currentLength));

	list&lt;arInteractable*&gt; objectlist;
	std::copy(objects.begin (), objects.end (), std::back_inserter(objectlist));
	
	// Check if the maximum length has been reached or an object has been touched.
	while(_currentLength &lt; maxLength &amp;&amp; !ar_pollingInteraction(self, objectlist)) {
		// If not, increase tip length by interaction distance.
		_currentLength += _interactionDistance;
		setTipOffset(arVector3(0, 0, -_currentLength));
	}
	if(selectionMode == 1)
	{
		leftSelectedObjects.clear();
		upSelectedObjects.clear();
		rightSelectedObjects.clear();
		downSelectedObjects.clear();
		int numObjects = 0;
	
		vector&lt;arInteractable*&gt;::iterator i;
		for(i=objects.begin(); i != objects.end(); ++i) 
		{
			// get object location
			Object* oby = ((Object*)(*i));
			arMatrix4 objLoc = oby->getMatrix();
			// if object is in cone, then add to selected list
			float x[] = {objLoc[12], objLoc[13], objLoc[14]};
			float height = getLength();
			float radius = height/2.f;
			arMatrix4 tp = getBaseMatrix();
			arMatrix4 bm = getMatrix();
			float t[] = {tp[12],tp[13],tp[14]};
			float b[] = {bm[12],bm[13],bm[14]};
			
			if(isLyingInCone(x, t, b, radius, height))
			{
				if((numObjects) % 4 == 0)
				{
					leftSelectedObjects.push_back(oby);
				}
				else if(numObjects % 4 == 1)
				{
					upSelectedObjects.push_back(oby);
				}
				else if(numObjects % 4 == 2)
				{
					rightSelectedObjects.push_back(oby);
				}
				else if(numObjects % 4 == 3)
				{
					downSelectedObjects.push_back(oby);
				}
				++numObjects;
			}
		}
		if(numObjects == 0)
		{
			selectionMode = 0;
		}
		else if(numObjects == 1)
		{
			//if only one object, select it
			selectionMode = 0;
			Object* oby = leftSelectedObjects.front();
			//set the one object to selected
			oby->_selected = !oby->_selected;
		}
		else
		{
			//else selectionMode = 2, selected lists have all the items
			selectionMode = 2;
		}		
	}
							</code>
						</functioncode>
					</codeblock>
					<codeblock parent="lsquad" type="drawMain">
						<name>draw</name>
						<type>function</type>
						<documentation>
// Left hand effector&apos;s draw function.
						</documentation>
						<declaration>
void LeftVirtualHand::draw()
						</declaration>
						<functioncode>
							<code>
	// Always start with glPushMatrix to avoid matrix multiplications done here from
	// affecting other portions of the scene.
	glPushMatrix();

		// Set to center of effector.
		glMultMatrixf(getCenterMatrix().v);
		// Scale to make 1 ft. cube into a 2" x 2" rod with current length in ft.
		glScalef(2.0/12.0, 2.0/12.0, _currentLength);
		
		
			glScalef(12.0/2.0, 12.0/2.0, 1/_currentLength);
			glColor3f(1.0, 1.0, 0.0);
			//GLdouble base=min(1*_currentLength,10.0f);
			GLdouble base=_currentLength/2.0;
			GLdouble height=1*_currentLength;
			GLint slices =50;
			GLint stacks =50;
			glTranslatef(0.0,0.0,-height/2.0f);
			glutSolidCone(base,height,slices,stacks);
			glTranslatef(0.0,0.0,height/2.0f);
			glScalef(2.0/12.0, 2.0/12.0, _currentLength);

	// Always finish with glPopMatrix to match glPushMatrix above.
	glPopMatrix();							
							</code>
						</functioncode>
					</codeblock>
							<code parent="lsquad" type="preexchangeHeader">
		// Manipulator to make the effector extend until it touches an object or reaches
		// a maximum length (15 ft. by default).
		void flashy(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength = 15.0);
							</code>
							<code parent="lsquad" type="drawHeader">
		// Draw a representation for the left hand.
		void draw() ;//const;
							</code>
					
					<constructor parent="lsquad" type="constructor">
							<name>lhandconstructor</name>
							<type>function</type>
							<documentation>
		// Default constructor. 
		// Parameters for arEffector are:
		//		matrixIndex - index of matrix to use as position (2 is the left hand)
		//		numButtons - number of buttons to use from device array (11 buttons for Wiimote)
		//		loButton - index in device array of desired first button, (11 for left Wiimote)
		//				   which gets mapped to virtual button index 0 by default 
		//		buttonOffset - offset for mapping virtual buttons (0 for no offset)
		//		numAxes - number of axes to use from device (2 axes for left Wiimote)
		//		loAxis - index in device array of desired first axis, (2 for left Wiimote)
		//				 which gets mapped to virtual axis index 0 by default
		//		axisOffset - offset for mapping virtual axes (0 for no offset)
							</documentation>
							<declaration>
		LeftVirtualHand(const string&amp; filename = &quot;&quot;):arEffector(2, 11, 11, 0, 2, 2, 0)
							</declaration>
							<functioncode>
								<code>
		if(filename != &quot;&quot;) {
			if(!loadedOBJ.readOBJ(filename, &quot;data/obj&quot;)) { 
				cout &lt;&lt; &quot;Cound not load OBJ file: &quot; &lt;&lt; filename &lt;&lt; &apos;\n&apos;;
			}
		}
		
		
			// Set "tip" or point of interaction. Make ray initially 5 ft. long because we're going
			// to dynamically extend it to whatever object it touches first.
			_currentLength = 5.0;
			setTipOffset(arVector3(0, 0, -_currentLength));
			
			// Set to interact with closest object within 0.5 ft. of tip.
			// See szg/src/interaction/arInteractionSelector.h for alternative ways to select objects.
			_interactionDistance = 0.5;
			setInteractionSelector(arDistanceInteractionSelector(_interactionDistance));
			
			// Create grab condition when "A" button is pressed more than 0.5 to 
			// translate and rotate the selected object.
			// Wiimote index/button pairs:
			//		0	"2"
			//		1	"1"
			//		2	"B"
			//		3	"A"
			//		4	"-"
			//		5	"+"
			//		6	"L"
			//		7	"D"
			//		8	"R"
			//		9	"U"
			//		10	"H" or Home
			setDrag(arGrabCondition(AR_EVENT_BUTTON, 3, 0.5), arWandRelativeDrag());
								</code>
							</functioncode>
						</constructor>