							<code parent="rextend" type="callPreexchangeMain">
	// Extend right hand
	rightHand.extend(rightHand, objects);
							</code>
					<codeblock parent="rextend" type="preexchangeMain">
						<name>extend</name>
						<type>function</type>
						<documentation>
// Right hand effector&apos;s extend function for multiple objects.
// Purpose:
//		- Extends effector until it touches an object or reaches the maximum length.						
						</documentation>
						<declaration>
void RightVirtualHand::extend(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength)
						</declaration>
						<functioncode>
							<code>
	// Return if grabbing an object.
	if(getGrabbedObject() != 0) return;

	// Reset tip to 0.0 ft. length.
	_currentLength = 0.0;
	setTipOffset(arVector3(0, 0, -_currentLength));

	list&lt;arInteractable*&gt; objectlist;
	std::copy(objects.begin (), objects.end (), std::back_inserter(objectlist));
	
	// Check if the maximum length has been reached or an object has been touched.
	while(_currentLength &lt; maxLength &amp;&amp; !ar_pollingInteraction(self, objectlist)) {
		// If not, increase tip length by interaction distance.
		_currentLength += _interactionDistance;
		setTipOffset(arVector3(0, 0, -_currentLength));
	}
	if(getOnButton(1) &amp;&amp; ar_pollingInteraction(self, objectlist)) //if it interacted
	{
		//cout &lt;&lt; &quot;hit an object&quot; &lt;&lt; &apos;\n&apos;;
		//find out which object it interacted with
		vector&lt;arInteractable*&gt;::iterator i;
		for(i=objects.begin(); i != objects.end(); ++i) 
		{
			if(ar_pollingInteraction(self, *i))
			{
				Object *oby = ((Object*)(*i));
				oby-&gt;_selected = !oby-&gt;_selected;
			}
		}
	}
	
							</code>
						</functioncode>
					</codeblock>
					<codeblock parent="rextend" type="drawMain">
						<name>draw</name>
						<type>function</type>
						<documentation>
// Right hand effector&apos;s draw function.
						</documentation>
						<declaration>
void RightVirtualHand::draw()
						</declaration>
						<functioncode>
							<code>
	// Always start with glPushMatrix to avoid matrix multiplications done here from
	// affecting other portions of the scene.
	glPushMatrix();
							</code>
							<code>
		// Set to center of effector.
		glMultMatrixf(getCenterMatrix().v);
		// Scale to make 1 ft. cube into a 2&quot; x 2&quot; rod with current length in ft.
		glScalef(2.0/12.0, 2.0/12.0, _currentLength);
		// Draw the right hand red.
		glColor3f(1.0, 0.0, 0.0);
		// Create the 1 ft. cube.
		if(!handy)
		{
			glutSolidCube(1.0);
		}
		else
		{
			loadedOBJ.draw();
		}
		// Superimpose slightly larger black wireframe cube to make it easier to see shape.
		glColor3f(0.0, 0.0, 0.0); //TODO fix the bug that the color is left as red here and draws a red square
		if (!handy)
		{
			glColor3f(0.0, 0.0, 0.0);
			glutWireCube(1.01);
		}
							</code>
							<code>
		if(coneselection == true)
		{
			glScalef(12.0/2.0, 12.0/2.0, 1/_currentLength);
			glColor3f(1.0, 1.0, 0.0);
			//GLdouble base=min(1*_currentLength,10.0f);
			GLdouble base=_currentLength/2.0;
			GLdouble height=1*_currentLength;
			GLint slices =50;
			GLint stacks =50;
			glTranslatef(0.0,0.0,-height/2.0f);
			glutSolidCone(base,height,slices,stacks);
			glTranslatef(0.0,0.0,height/2.0f);
			glScalef(2.0/12.0, 2.0/12.0, _currentLength);
		}
	// Always finish with glPopMatrix to match glPushMatrix above.
	glPopMatrix();
							</code>
						</functioncode>
					</codeblock>
							<code parent="rextend" type="preexchangeHeader">
		// Manipulator to make the effector extend until it touches an object or reaches
		// a maximum length (15 ft. by default).
		void extend(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength = 15.0);
							</code>
							<code parent="rextend" type="drawHeader">
		// Draw a representation for the right hand.
		void draw() ;//const;
							</code>
					
					<constructor parent="rextend" type="constructor">
							<name>rhandconstructor</name>
							<type>function</type>
							<documentation>
		// Default constructor. 
		// Parameters for arEffector are:
		//		matrixIndex - index of matrix to use as position (1 is the right hand)
		//		numButtons - number of buttons to use from device array (11 buttons for Wiimote)
		//		loButton - index in device array of desired first button, (0 for right Wiimote)
		//				   which gets mapped to virtual button index 0 by default 
		//		buttonOffset - offset for mapping virtual buttons (0 for no offset)
		//		numAxes - number of axes to use from device (2 axes for Wiimote)
		//		loAxis - index in device array of desired first axis, (0 for right Wiimote)
		//				 which gets mapped to virtual axis index 0 by default
		//		axisOffset - offset for mapping virtual axes (0 for no offset)
							</documentation>
							<declaration>
		RightVirtualHand(const string&amp; filename = &quot;&quot;):arEffector(1, 11, 0, 0, 2, 0, 0)
							</declaration>
							<functioncode>
								<code>
		handy = false;
		if(filename != &quot;&quot;) {
			handy = true;
			if(!loadedOBJ.readOBJ(filename,&quot;data/obj&quot;)) { 
				cout &lt;&lt; &quot;Cound not load OBJ file: &quot; &lt;&lt; filename &lt;&lt; &apos;\n&apos;;
				handy = false;
			}
		}
		
			// Set &quot;tip&quot; or point of interaction. Make ray initially 5 ft. long because we&apos;re going
			// to dynamically extend it to whatever object it touches first.
			_currentLength = 5.0;
			setTipOffset(arVector3(0, 0, -_currentLength));
			
			// Set to interact with closest object within 0.5 ft. of tip.
			// See szg/src/interaction/arInteractionSelector.h for alternative ways to select objects.
			_interactionDistance = 0.5;
			setInteractionSelector(arDistanceInteractionSelector(_interactionDistance));
			
			// Create grab condition when &quot;A&quot; button is pressed more than 0.5 to 
			// translate and rotate the selected object.
			// Wiimote index/button pairs:
			//		0	&quot;2&quot;
			//		1	&quot;1&quot;
			//		2	&quot;B&quot;
			//		3	&quot;A&quot;
			//		4	&quot;-&quot;
			//		5	&quot;+&quot;
			//		6	&quot;L&quot;
			//		7	&quot;D&quot;
			//		8	&quot;R&quot;
			//		9	&quot;U&quot;
			//		10	&quot;H&quot; or Home
			setDrag(arGrabCondition(AR_EVENT_BUTTON, 3, 0.5), arWandRelativeDrag());
								</code>
							</functioncode>
						</constructor>
						
						
						
						
						
						
						
						
						
						
						
						<code parent="rextend" type="declaration">
RightVirtualHand rightHand(&quot;staff.obj&quot;);
						</code>
						<code parent="lextend" type="declaration">
LeftVirtualHand leftHand(&quot;staff.obj&quot;);
						</code>
						
						
						
						
						
						
						
						
							<code parent="lextend" type="callPreexchangeMain">
	// Extend left hand
	leftHand.extend(leftHand, objects);
							</code>
					<codeblock parent="lextend" type="preexchangeMain">
						<name>extend</name>
						<type>function</type>
						<documentation>
// Left hand effector&apos;s extend function for multiple objects.
// Purpose:
//		- Extends effector until it touches an object or reaches the maximum length.						
						</documentation>
						<declaration>
void LeftVirtualHand::extend(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength)
						</declaration>
						<functioncode>
							<code>
	// Return if grabbing an object.
	if(getGrabbedObject() != 0) return;

	// Reset tip to 0.0 ft. length.
	_currentLength = 0.0;
	setTipOffset(arVector3(0, 0, -_currentLength));

	list&lt;arInteractable*&gt; objectlist;
	std::copy(objects.begin (), objects.end (), std::back_inserter(objectlist));
	
	// Check if the maximum length has been reached or an object has been touched.
	while(_currentLength &lt; maxLength &amp;&amp; !ar_pollingInteraction(self, objectlist)) {
		// If not, increase tip length by interaction distance.
		_currentLength += _interactionDistance;
		setTipOffset(arVector3(0, 0, -_currentLength));
	}
	if(getOnButton(1) &amp;&amp; ar_pollingInteraction(self, objectlist)) //if it interacted
	{
		//cout &lt;&lt; &quot;hit an object&quot; &lt;&lt; &apos;\n&apos;;
		//find out which object it interacted with
		vector&lt;arInteractable*&gt;::iterator i;
		for(i=objects.begin(); i != objects.end(); ++i) 
		{
			if(ar_pollingInteraction(self, *i))
			{
				Object *oby = ((Object*)(*i));
				oby-&gt;_selected = !oby-&gt;_selected;
			}
		}
	}
	
							</code>
						</functioncode>
					</codeblock>
					<codeblock parent="lextend" type="drawMain">
						<name>draw</name>
						<type>function</type>
						<documentation>
// Left hand effector&apos;s draw function.
						</documentation>
						<declaration>
void LeftVirtualHand::draw()
						</declaration>
						<functioncode>
							<code>
	// Always start with glPushMatrix to avoid matrix multiplications done here from
	// affecting other portions of the scene.
	glPushMatrix();
							</code>
							<code>
		// Set to center of effector.
		glMultMatrixf(getCenterMatrix().v);
		// Scale to make 1 ft. cube into a 2&quot; x 2&quot; rod with current length in ft.
		glScalef(2.0/12.0, 2.0/12.0, _currentLength);
		// Draw the left hand red.
		glColor3f(1.0, 0.0, 0.0);
		// Create the 1 ft. cube.
		if(!handy)
		{
			glutSolidCube(1.0);
		}
		else
		{
			loadedOBJ.draw();
		}
		// Superimpose slightly larger black wireframe cube to make it easier to see shape.
		glColor3f(0.0, 0.0, 0.0); //TODO fix the bug that the color is left as red here and draws a red square
		if (!handy)
		{
			glColor3f(0.0, 0.0, 0.0);
			glutWireCube(1.01);
		}
							</code>
							<code>
		if(coneselection == true)
		{
			glScalef(12.0/2.0, 12.0/2.0, 1/_currentLength);
			glColor3f(1.0, 1.0, 0.0);
			//GLdouble base=min(1*_currentLength,10.0f);
			GLdouble base=_currentLength/2.0;
			GLdouble height=1*_currentLength;
			GLint slices =50;
			GLint stacks =50;
			glTranslatef(0.0,0.0,-height/2.0f);
			glutSolidCone(base,height,slices,stacks);
			glTranslatef(0.0,0.0,height/2.0f);
			glScalef(2.0/12.0, 2.0/12.0, _currentLength);
		}
	// Always finish with glPopMatrix to match glPushMatrix above.
	glPopMatrix();
							</code>
						</functioncode>
					</codeblock>
							<code parent="lextend" type="preexchangeHeader">
		// Manipulator to make the effector extend until it touches an object or reaches
		// a maximum length (15 ft. by default).
		void extend(arEffector&amp; self, vector&lt;arInteractable*&gt;&amp; objects, float maxLength = 15.0);
							</code>
							<code parent="lextend" type="drawHeader">
		// Draw a representation for the left hand.
		void draw() ;//const;
							</code>
					
					<constructor parent="lextend" type="constructor">
							<name>lhandconstructor</name>
							<type>function</type>
							<documentation>
		// Default constructor. 
		// Parameters for arEffector are:
		//		matrixIndex - index of matrix to use as position (2 is the left hand)
		//		numButtons - number of buttons to use from device array (11 buttons for Wiimote)
		//		loButton - index in device array of desired first button, (11 for left Wiimote)
		//				   which gets mapped to virtual button index 0 by default 
		//		buttonOffset - offset for mapping virtual buttons (0 for no offset)
		//		numAxes - number of axes to use from device (2 axes for left Wiimote)
		//		loAxis - index in device array of desired first axis, (2 for left Wiimote)
		//				 which gets mapped to virtual axis index 0 by default
		//		axisOffset - offset for mapping virtual axes (0 for no offset)
							</documentation>
							<declaration>
		LeftVirtualHand(const string&amp; filename = &quot;&quot;):arEffector(2, 11, 11, 0, 2, 2, 0)
							</declaration>
							<functioncode>
								<code>
		handy = false;
		if(filename != &quot;&quot;) {
			handy = true;
			if(!loadedOBJ.readOBJ(filename,&quot;data/obj&quot;)) { 
				cout &lt;&lt; &quot;Cound not load OBJ file: &quot; &lt;&lt; filename &lt;&lt; &apos;\n&apos;;
				handy = false;
			}
		}
		
			// Set &quot;tip&quot; or point of interaction. Make ray initially 5 ft. long because we&apos;re going
			// to dynamically extend it to whatever object it touches first.
			_currentLength = 5.0;
			setTipOffset(arVector3(0, 0, -_currentLength));
			
			// Set to interact with closest object within 0.5 ft. of tip.
			// See szg/src/interaction/arInteractionSelector.h for alternative ways to select objects.
			_interactionDistance = 0.5;
			setInteractionSelector(arDistanceInteractionSelector(_interactionDistance));
			
			// Create grab condition when &quot;A&quot; button is pressed more than 0.5 to 
			// translate and rotate the selected object.
			// Wiimote index/button pairs:
			//		0	&quot;2&quot;
			//		1	&quot;1&quot;
			//		2	&quot;B&quot;
			//		3	&quot;A&quot;
			//		4	&quot;-&quot;
			//		5	&quot;+&quot;
			//		6	&quot;L&quot;
			//		7	&quot;D&quot;
			//		8	&quot;R&quot;
			//		9	&quot;U&quot;
			//		10	&quot;H&quot; or Home
			setDrag(arGrabCondition(AR_EVENT_BUTTON, 3, 0.5), arWandRelativeDrag());
								</code>
							</functioncode>
						</constructor>